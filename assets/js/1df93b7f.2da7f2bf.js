"use strict";(self.webpackChunkheynky=self.webpackChunkheynky||[]).push([[237],{6581:(e,t,n)=>{n.r(t),n.d(t,{default:()=>w});var a=n(7294),r=n(7676),l=n(2263),s=n(6010),i=n(1853),o=n(6393),c=(0,a.forwardRef)((({as:e="div",className:t,children:n,css:r,...l},o)=>{let{cssProps:c,...u}=(0,a.useMemo)((()=>(0,i.Pi)(l)),[l]),d=(0,a.useMemo)((()=>(0,i.iv)(c)({css:r})),[i.iv,c,r]);return a.createElement(e,{ref:o,className:(0,s.Z)([t,d.className]),...u},n)})),u=(0,a.forwardRef)(((e,t)=>a.createElement(c,{ref:t,display:"flex",minWidth:0,...e}))),d=(0,a.forwardRef)(((e,t)=>a.createElement(c,{ref:t,display:"grid",...e})));(0,a.forwardRef)(((e,t)=>a.createElement(d,{ref:t,placeItems:"center",...e}))),(0,a.forwardRef)(((e,t)=>{let{icon:n,iconSize:r="20px",iconProps:l={},invert:s,_hover:i={},isHovered:o,...c}=e;return a.createElement(u,{backgroundColor:"transparent",border:"0",display:"flex",alignItems:"center",justifyContent:"center",as:"button",placeItems:"center",borderRadius:"100%",size:"36px",position:"relative",userSelect:"none",_hover:{cursor:"pointer",...i},color:"currentColor",ref:t,...c},a.createElement(n,{display:"block",size:r,color:"currentColor",...l}))})),(0,a.forwardRef)((({size:e="36px",borderRadius:t=e,...n},r)=>a.createElement(d,{ref:r,placeItems:"center",size:e,borderRadius:t,...n})));var m=a.forwardRef((({children:e,isInline:t,spacing:n="$base",divider:r,shouldWrapChildren:l,...s},i)=>{let o=function(e){return a.Children.toArray(e).filter((e=>a.isValidElement(e)))}(e);return a.createElement(u,{ref:i,gap:n,flexDirection:t?"row":"column",...s},o.map(((e,t)=>{let n=o.length===t+1;return l?a.createElement(a.Fragment,{key:`${t}`},a.createElement(c,{display:"inline-block"},e),n?null:r):a.createElement(a.Fragment,{key:`${t}`},e,!n&&r?r:null)})))})),p=(a.forwardRef(((e,t)=>a.createElement(m,{spacing:"$0",isInline:!0,ref:t,alignItems:"center",justifyContent:"space-between",...e}))),a.forwardRef((({variant:e,className:t,css:n={},...r},l)=>{let i=e&&(e=>{switch(e){case"Body01":case"Body02":case"Display01":case"Display02":case"Heading01":case"Heading02":case"Heading03":case"Heading04":case"Heading05":return"text";case"Caption01":case"Caption02":return"text-subdued";case"Label01":case"Label02":case"Label03":return"text-dim"}})(e),u=e?o.sm[e]:{};return a.createElement(c,{className:(0,s.Z)([t]),ref:l,color:i,css:{...u,...n},...r})})));var h=n(6066),y=n(7462),f=n(9960);const g=e=>{let{children:t,...n}=e;return a.createElement(p,(0,y.Z)({as:f.Z,variant:"Body01",textDecoration:"underline",color:"$text-onPrimary"},n),t)},E=n.p+"assets/medias/clarinet-intellisense-83ceaa825e53282545d70956b34085a4.mp4";function w(){const{siteConfig:e}=(0,l.Z)();return a.createElement(r.Z,{title:"Clarigen - a Clarity developer's tool"},a.createElement(c,{mt:"$3",className:"container",mx:"auto",maxWidth:"800px"},a.createElement(m,{spacing:"$5"},a.createElement(p,{as:"h1",variant:"Heading01"},"Clarigen"),a.createElement(c,{maxWidth:"600px"},a.createElement(p,{as:"h2",variant:"Heading03"},"A developer tool that makes it simple and pleasant to build Clarity apps")),a.createElement(p,{variant:"Body01"},"Clarigen is a code generator that gives you type-safe interfaces for interacting with your Clarity contracts. Whether you're writing unit tests with"," ",a.createElement(g,{target:"_blank",href:"https://github.com/hirosystems/clarinet"},"Clarinet")," ","or building web apps with"," ",a.createElement(g,{target:"_blank",href:"https://micro-stacks.dev"},"micro-stacks"),","," Clarigen will give you exactly what you need so you're building great apps - not writing boilerplate."))),a.createElement("main",null,a.createElement(m,{spacing:"$5",my:"$8",className:"container",mx:"auto",maxWidth:"800px"},a.createElement(m,{spacing:"$3"},a.createElement(p,{variant:"Heading04"},"See the difference:"),a.createElement(p,{variant:"Body01"},"The best way to understand the value that Clarigen provides is to see how it changes the code you'd otherwise write. In these examples, we're comparing code that uses Clarinet and micro-stacks. Importantly, Clarigen does ",a.createElement("strong",null,"not")," ","change the tool you're using under the hood. You can use the same tools as before - just with better types."),a.createElement(p,{variant:"Body01"},"First, let's look at code that's typically used when testing contracts in Clarinet:")),a.createElement(c,{flexGrow:1},a.createElement(h.Z,{language:"typescript",title:"Vanilla Clarinet"},'const wallet_1 = accounts.get(\'wallet_1\')!;\nlet block = chain.mineBlock([\n    Tx.contractCall("counter", "increment", [types.uint(1)], wallet_1.address),\n]);\nblock.receipts[0].result\n  .expectOk()\n  .expectUint(2);')),a.createElement(p,{variant:"Body01"},"In the above example, there are no Typescript types to help you work with your contracts. Your contract names are just"," ",a.createElement("code",null,"string"),"s, and you have to manually type your function arguments (like ",a.createElement("code",null,"types.uint(1)"),"). And when you're working with transaction results, you have to explicitly state the expected return (",a.createElement("code",null,".expectUint(2)"),")."),a.createElement(p,{variant:"Body01"},"Here's what that test looks like after Clarigen has generated all the boilerplate for you:"),a.createElement(c,{flexGrow:1},a.createElement(h.Z,{language:"typescript",title:"Clarinet tests - with Clarigen!"},"const alice = accounts.get('wallet_1').address;\nconst receipt = chain.mineOne(\n  txOk(contracts.counter.increment(2), alice),\n);\nassertEquals(receipt.value, 2n);\n                  ")),a.createElement(p,{variant:"Body01"},"Or a video to show that sweet, sweet intellisense:"),a.createElement(c,{width:"100%"},a.createElement("video",{src:E,controls:!0,style:{width:"100%"}})),a.createElement(p,{variant:"Body01"},"Now, you've got:"),a.createElement(m,{spacing:"$1",ml:"$4"},a.createElement(p,{variant:"Body01"},"\u2705 All your contract types pre-defined"),a.createElement(p,{variant:"Body01"},"\u2705 Your `Devnet` accounts are type-safe"),a.createElement(p,{variant:"Body01"},"\u2705 Helpers to specify expected responses (",a.createElement("code",null,"txOk"),")"),a.createElement(p,{variant:"Body01"},"\u2705 Type-safe response values, without having to specify them")),a.createElement(p,{variant:"Body01"},"Let's look at one more example - using ",a.createElement("code",null,"micro-stacks")," to call a contract from a React app:"),a.createElement(h.Z,{language:"tsx",title:"hooks/use-with-micro-stacks.ts"},"const { openContractCall, isRequestPending } = useOpenContractCall();\n\nasync function handleOpenContractCall() {\n  const functionArgs = [\n    uintCV(1234),\n    intCV(-234),\n    bufferCV(utf8ToBytes('hello, world')),\n    stringAsciiCV('hey-ascii'),\n    stringUtf8CV('hey-utf8'),\n    standardPrincipalCV('ST1X6M947Z7E58CNE0H8YJVJTVKS9VW0PHEG3NHN3'),\n    trueCV(),\n  ];\n  await openContractCall({\n    contractAddress: 'ST1X6M947Z7E58CNE0H8YJVJTVKS9VW0PHEG3NHN3',\n    contractName: 'faker',\n    functionName: 'rawr',\n    functionArgs,\n    onFinish: () => {}\n  })\n}\n    "),a.createElement(p,{variant:"Body01"},"With Clarigen, here's what that code looks like:"),a.createElement(h.Z,{language:"tsx",title:"hooks/use-with-clarigen.ts"},"const { openContractCall } = useOpenContractCall(contracts.faker.rawr);\n\nasync function handleOpenContractCall() {\n  await openContractCall({\n    functionArgs: [ // with type hints!\n      1234,\n      -234,\n      utf8ToBytes('hello, world'),\n      'hey-ascii',\n      'hey-utf8',\n      'ST1X6M947Z7E58CNE0H8YJVJTVKS9VW0PHEG3NHN3',\n      true\n    ],\n    onFinish: () => {}\n  })\n}\n            "))))}},6010:(e,t,n)=>{function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:()=>r})}}]);