"use strict";(self.webpackChunkheynky=self.webpackChunkheynky||[]).push([[381],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1007:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7294),r=n(6010);const i="browserWindow_my1Q",l="browserWindowHeader_jXSR",o="buttons_uHc7",s="browserWindowAddressBar_Pd8y",c="dot_giz1",u="browserWindowMenuIcon_Vhuh",p="bar_rrRL",d="browserWindowBody_Idgs";function m(e){let{children:t,minHeight:n,url:m="http://localhost:3000"}=e;return a.createElement("div",{className:i,style:{minHeight:n}},a.createElement("div",{className:l},a.createElement("div",{className:o},a.createElement("span",{className:c,style:{background:"#f25f58"}}),a.createElement("span",{className:c,style:{background:"#fbbe3c"}}),a.createElement("span",{className:c,style:{background:"#58cb42"}})),a.createElement("div",{className:(0,r.Z)(s,"text--truncate")},m),a.createElement("div",{className:u},a.createElement("div",null,a.createElement("span",{className:p}),a.createElement("span",{className:p}),a.createElement("span",{className:p})))),a.createElement("div",{className:d},t))}},9399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));n(1007);const i={sidebar_label:"Write tests with Clarigen"},l="Tutorial: Write tests with Clarigen",o={unversionedId:"write-tests-tutorial",id:"write-tests-tutorial",title:"Tutorial: Write tests with Clarigen",description:"In this tutorial, you will setup a project and write tests using Clarigen-generated types. You will use Clarinet for running your tests.",source:"@site/docs/write-tests-tutorial.md",sourceDirName:".",slug:"/write-tests-tutorial",permalink:"/docs/write-tests-tutorial",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Write tests with Clarigen"},sidebar:"clarigen",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Deno (Clarinet tests)",permalink:"/docs/deno"}},s={},c=[{value:"Setup your environment",id:"setup-your-environment",level:2},{value:"Deno",id:"deno",level:3},{value:"Clarinet",id:"clarinet",level:3},{value:"Clarigen",id:"clarigen",level:3},{value:"Create a new project",id:"create-a-new-project",level:2},{value:"Generate a Clarigen configuration file",id:"generate-a-clarigen-configuration-file",level:2},{value:"Create our first Clarity contract",id:"create-our-first-clarity-contract",level:2},{value:"Generate Clarigen types",id:"generate-clarigen-types",level:2},{value:"Write tests",id:"write-tests",level:2},{value:"Setup imports",id:"setup-imports",level:3},{value:"Setup our test definition",id:"setup-our-test-definition",level:3},{value:"Testing a read-only function",id:"testing-a-read-only-function",level:3},{value:"Calling public functions",id:"calling-public-functions",level:3},{value:"Testing that state is updated",id:"testing-that-state-is-updated",level:3},{value:"Wrapping up",id:"wrapping-up",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tutorial-write-tests-with-clarigen"},"Tutorial: Write tests with Clarigen"),(0,r.kt)("p",null,"In this tutorial, you will setup a project and write tests using Clarigen-generated types. You will use Clarinet for running your tests."),(0,r.kt)("h2",{id:"setup-your-environment"},"Setup your environment"),(0,r.kt)("p",null,"First, you'll need a few things installed. You will use your CLI to install each dependency, if they're not installed already."),(0,r.kt)("h3",{id:"deno"},"Deno"),(0,r.kt)("p",null,"Clarigen is a ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/"},"Deno")," project, so you'll need that installed in order to use it."),(0,r.kt)("p",null,"To install Deno, follow the instructions on ",(0,r.kt)("a",{parentName:"p",href:"https://deno.land/manual@v1.28.2/getting_started/installation"},"Deno's installation documentation page"),"."),(0,r.kt)("p",null,"To ensure Deno is installed, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deno -V\n")),(0,r.kt)("p",null,"This tutorial was tested with Deno version 1.27. It's recommended you use the latest version of Deno with Clarigen."),(0,r.kt)("h3",{id:"clarinet"},"Clarinet"),(0,r.kt)("p",null,"Clarigen uses Clarinet, a powerful Clarity development tool, under the hood. You'll need it installed. Visit the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/clarinet#installation"},"installation docs for Clarinet")," for environment-specific instructions."),(0,r.kt)("p",null,"To ensure Clarinet is installed, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clarinet -V\n")),(0,r.kt)("p",null,"This tutorial was tested with Clarinet 1.0.5. It's recommended to use the latest version of Clarinet."),(0,r.kt)("h3",{id:"clarigen"},"Clarigen"),(0,r.kt)("p",null,"Finally, it's time to install Clarigen. To do so, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"deno install -qAfn clarigen https://deno.land/x/clarigen/cli.ts\n")),(0,r.kt)("p",null,"Make sure it's installed by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clarigen -V\n")),(0,r.kt)("h2",{id:"create-a-new-project"},"Create a new project"),(0,r.kt)("p",null,"In this tutorial, we're making a new project from scratch. To generate the project, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"clarinet new")," command. In your CLI, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clarinet new clarigen-tutorial && cd clarigen-tutorial\n")),(0,r.kt)("p",null,"This command will generate a new folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"clarigen-tutorial"),". For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/clarinet#create-a-new-project"},"Clarinet documentation around generating new projects"),"."),(0,r.kt)("p",null,"At this point, you should open up this folder in your favorite code editor."),(0,r.kt)("h2",{id:"generate-a-clarigen-configuration-file"},"Generate a Clarigen configuration file"),(0,r.kt)("p",null,"You now have a functional Clarinet project, but we need to create a Clarigen-specific configuration file. To do so, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clarigen init\n")),(0,r.kt)("p",null,"This will create a configuration file at ",(0,r.kt)("inlineCode",{parentName:"p"},"Clarigen.toml"),". For this tutorial, we won't need to update the default config file. To learn more, check out the ",(0,r.kt)("a",{parentName:"p",href:"./configuration"},"configuration docs"),"."),(0,r.kt)("h2",{id:"create-our-first-clarity-contract"},"Create our first Clarity contract"),(0,r.kt)("p",null,"Now our project is setup, and we are ready to start writing Clarity contracts! In this tutorial, we'll be using a basic \"counter\" contract, and this tutorial won't go into details about writing Clarity contracts. To learn more, visit the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.stacks.co/docs/write-smart-contracts/"},"Stacks documentation"),"."),(0,r.kt)("p",null,"First, generate the contract by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clarinet contracts new counter\n")),(0,r.kt)("p",null,"This generates a ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/counter.clar")," file, and a basic ",(0,r.kt)("inlineCode",{parentName:"p"},"test/counter_test.ts")," test file."),(0,r.kt)("p",null,"Open up the ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/counter.clar")," file and remove all the existing code. Paste in this Clarity code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-clarity",metastring:'title="contracts/counter.clar"',title:'"contracts/counter.clar"'},'(define-data-var counter uint u1)\n\n;; Get the current counter\n(define-read-only (get-counter)\n  (var-get counter)\n)\n\n;; Increment the counter.\n;;\n;; @returns the new value of the counter\n;;\n;; @param step; The interval to increase the counter by\n(define-public (increment (step uint))\n  (let (\n    (new-val (+ step (var-get counter)))\n  )\n  ;; #[allow(unchecked_data)]\n  (var-set counter new-val)\n  (print { object: "counter", action: "incremented", value: new-val })\n  (ok new-val))\n)\n\n;; Decrement the counter\n;;\n;; @param step; The interval to increase the counter by\n(define-public (decrement (step uint))\n  (let (\n    (new-val (- (var-get counter) step))\n  )\n  ;; #[allow(unchecked_data)]\n  (var-set counter new-val)\n  (print { object: "counter", action: "decremented", value: new-val })\n  (ok new-val))\n)\n')),(0,r.kt)("h2",{id:"generate-clarigen-types"},"Generate Clarigen types"),(0,r.kt)("p",null,"Now that we have a full Clarity contract, we can use Clarigen to generate the code that makes testing our contract easy. To do so, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clarigen --verbose\n")),(0,r.kt)("p",null,"This will generate two files. The important file is ",(0,r.kt)("inlineCode",{parentName:"p"},"artifacts/clarigen.ts"),", which is what we'll be importing to write our tests. This file includes all of the type information from our counter contract."),(0,r.kt)("h2",{id:"write-tests"},"Write tests"),(0,r.kt)("p",null,"At this point, we're all setup to start writing unit tests for our counter contract."),(0,r.kt)("h3",{id:"setup-imports"},"Setup imports"),(0,r.kt)("p",null,"Open up ",(0,r.kt)("inlineCode",{parentName:"p"},"tests/counter_test.ts")," and delete the existing contents of the file."),(0,r.kt)("p",null,"At the top of the file, add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},'import { assertEquals } from "https://deno.land/std@0.90.0/testing/asserts.ts";\nimport { simnet } from "../artifacts/clarigen.ts";\nimport { factory, txOk } from "https://deno.land/x/clarigen/mod.ts";\n')),(0,r.kt)("admonition",{title:"What am I importing?",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"simnet"),' from our auto-generated code. This includes info from our "counter" contract'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"assertEquals")," from Deno's standard library"),(0,r.kt)("li",{parentName:"ul"},"A few helper methods from Clarigen's Deno library, which we'll use to write tests"))),(0,r.kt)("h3",{id:"setup-our-test-definition"},"Setup our test definition"),(0,r.kt)("p",null,"We'll now write our test definition."),(0,r.kt)("p",null,"Below our imports, add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},'const {\n  test,\n  contracts: { counter },\n} = factory(simnet);\n\ntest({\n  name: "Counter contract works",\n  fn(chain, accounts) {\n    // TODO: our tests go here\n  },\n});\n')),(0,r.kt)("p",null,"You can now run ",(0,r.kt)("inlineCode",{parentName:"p"},"clarinet test"),", and you'll see that our one test (\"Counter contract works\") passes. That's because we haven't written any assertions yet!"),(0,r.kt)("h3",{id:"testing-a-read-only-function"},"Testing a read-only function"),(0,r.kt)("p",null,"We'll start by writing a test that checks the initial value of our counter. It should equal one."),(0,r.kt)("p",null,"Inside our test function (",(0,r.kt)("inlineCode",{parentName:"p"},"fn()"),"), remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"// TODO")," line and add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},"const initial = chain.rov(counter.getCounter());\nassertEquals(initial, 1n);\n")),(0,r.kt)("p",null,"The full test function should look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},'test({\n  name: "Counter contract works",\n  fn(chain, accounts) {\n    const initial = chain.rov(counter.getCounter());\n    assertEquals(initial, 1n);\n  },\n});\n')),(0,r.kt)("p",null,"Our code is calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"get-counter")," function on our contract to get the current value. Then, it asserts that the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"get-counter"),' is equal to 1. With Clarity, all "numbers" are integers, so Clarigen converts them to ',(0,r.kt)("inlineCode",{parentName:"p"},"BigInt"),"."),(0,r.kt)("p",null,"Once again, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"clarinet test"),", and your test should pass. You can also run ",(0,r.kt)("inlineCode",{parentName:"p"},"clarinet test --watch")," to automatically run the test whenever the file is saved."),(0,r.kt)("h3",{id:"calling-public-functions"},"Calling public functions"),(0,r.kt)("p",null,"Next, we'll call the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," function to change the counter value. To do so, we'll use Clarigen's ",(0,r.kt)("inlineCode",{parentName:"p"},"txOk")," helper method. This generates a transaction payload for a given account."),(0,r.kt)("p",null,"Below the code you just added (at the bottom of the test function), add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},'const sender = accounts.addr("wallet_1");\nconst incrementResult = chain.mineOne(txOk(counter.increment(2n), sender));\nassertEquals(incrementResult.value, 3n);\n')),(0,r.kt)("p",null,"This code is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Getting the Stacks address from one of the accounts in our ",(0,r.kt)("inlineCode",{parentName:"li"},"settings/Devnet.toml")," file"),(0,r.kt)("li",{parentName:"ul"},"Mining a block with one transaction calling ",(0,r.kt)("inlineCode",{parentName:"li"},"increment")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"2")," as the argument"),(0,r.kt)("li",{parentName:"ul"},"Asserting the result of that contract call is equal to 3")),(0,r.kt)("p",null,"Once again, run ",(0,r.kt)("inlineCode",{parentName:"p"},"clarinet test")," to make sure the test passes."),(0,r.kt)("h3",{id:"testing-that-state-is-updated"},"Testing that state is updated"),(0,r.kt)("p",null,"To wrap things up, we'll once again call ",(0,r.kt)("inlineCode",{parentName:"p"},"get-counter")," to make sure the contract has been updated."),(0,r.kt)("p",null,"At the bottom of your test, add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},"const newCounter = chain.rov(counter.getCounter());\nassertEquals(newCounter, 3n);\n")),(0,r.kt)("p",null,"Run the test again to make sure everything passes."),(0,r.kt)("h2",{id:"wrapping-up"},"Wrapping up"),(0,r.kt)("p",null,"Your test function should now look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="tests/counter_test.ts"',title:'"tests/counter_test.ts"'},'import { assertEquals } from "https://deno.land/std@0.90.0/testing/asserts.ts";\nimport { simnet } from "../artifacts/clarigen.ts";\nimport { factory, txOk } from "https://deno.land/x/clarigen/mod.ts";\n\nconst {\n  test,\n  contracts: { counter },\n} = factory(simnet);\n\ntest({\n  name: "Counter contract works",\n  fn(chain, accounts) {\n    const initial = chain.rov(counter.getCounter());\n    assertEquals(initial, 1n);\n\n    const sender = accounts.addr("wallet_1");\n    const incrementResult = chain.mineOne(txOk(counter.increment(2n), sender));\n    assertEquals(incrementResult.value, 3n);\n\n    const newCounter = chain.rov(counter.getCounter());\n    assertEquals(newCounter, 3n);\n  },\n});\n')),(0,r.kt)("p",null,"Now that you've got this test in place, try adding your own code that calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"decrement")," function and asserts that the counter value was decreased."),(0,r.kt)("p",null,"To learn more about writing unit tests with Clarigen, visit the ",(0,r.kt)("a",{parentName:"p",href:"./deno"},"Clarigen testing")," docs."))}p.isMDXComponent=!0},6010:(e,t,n)=>{function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:()=>r})}}]);